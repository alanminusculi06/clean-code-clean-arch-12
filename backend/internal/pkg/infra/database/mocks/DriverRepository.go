// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	domain "backend/internal/pkg/domain"

	mock "github.com/stretchr/testify/mock"

	user "backend/internal/pkg/domain/user"
)

// DriverRepository is an autogenerated mock type for the DriverRepository type
type DriverRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: driverID
func (_m *DriverRepository) Get(driverID string) (*user.Driver, *domain.ApiError) {
	ret := _m.Called(driverID)

	var r0 *user.Driver
	var r1 *domain.ApiError
	if rf, ok := ret.Get(0).(func(string) (*user.Driver, *domain.ApiError)); ok {
		return rf(driverID)
	}
	if rf, ok := ret.Get(0).(func(string) *user.Driver); ok {
		r0 = rf(driverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *domain.ApiError); ok {
		r1 = rf(driverID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ApiError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: driver
func (_m *DriverRepository) Save(driver user.Driver) (*user.Driver, *domain.ApiError) {
	ret := _m.Called(driver)

	var r0 *user.Driver
	var r1 *domain.ApiError
	if rf, ok := ret.Get(0).(func(user.Driver) (*user.Driver, *domain.ApiError)); ok {
		return rf(driver)
	}
	if rf, ok := ret.Get(0).(func(user.Driver) *user.Driver); ok {
		r0 = rf(driver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(user.Driver) *domain.ApiError); ok {
		r1 = rf(driver)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ApiError)
		}
	}

	return r0, r1
}

// NewDriverRepository creates a new instance of DriverRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriverRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DriverRepository {
	mock := &DriverRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
