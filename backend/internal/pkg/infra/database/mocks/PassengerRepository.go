// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	domain "backend/internal/pkg/domain"

	mock "github.com/stretchr/testify/mock"

	user "backend/internal/pkg/domain/user"
)

// PassengerRepository is an autogenerated mock type for the PassengerRepository type
type PassengerRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: passengerID
func (_m *PassengerRepository) Get(passengerID string) (*user.Passenger, *domain.ApiError) {
	ret := _m.Called(passengerID)

	var r0 *user.Passenger
	var r1 *domain.ApiError
	if rf, ok := ret.Get(0).(func(string) (*user.Passenger, *domain.ApiError)); ok {
		return rf(passengerID)
	}
	if rf, ok := ret.Get(0).(func(string) *user.Passenger); ok {
		r0 = rf(passengerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Passenger)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *domain.ApiError); ok {
		r1 = rf(passengerID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ApiError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: passenger
func (_m *PassengerRepository) Save(passenger user.Passenger) (*user.Passenger, *domain.ApiError) {
	ret := _m.Called(passenger)

	var r0 *user.Passenger
	var r1 *domain.ApiError
	if rf, ok := ret.Get(0).(func(user.Passenger) (*user.Passenger, *domain.ApiError)); ok {
		return rf(passenger)
	}
	if rf, ok := ret.Get(0).(func(user.Passenger) *user.Passenger); ok {
		r0 = rf(passenger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Passenger)
		}
	}

	if rf, ok := ret.Get(1).(func(user.Passenger) *domain.ApiError); ok {
		r1 = rf(passenger)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ApiError)
		}
	}

	return r0, r1
}

// NewPassengerRepository creates a new instance of PassengerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPassengerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PassengerRepository {
	mock := &PassengerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
